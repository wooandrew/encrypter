// Encrypter : miscfunctions.h v1.0.1 : Andrew Woo (c) 2017 - present
// Email: seungminleader@gmail.com
// Website: wooandrew.dev

/** A subsidary .h file of Project Encrypter by Andrew Woo
  * Miscellaneous functions required for activating algorithms,
  * such as generating a cipher.

  * This software is licensed under the MIT License.
**/

/**
Copyright (c) 2018 Andrew Woo

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
**/

#include <string>           // For string
#include <vector>           // For vector & related functions
#include <bitset>           // For bitset
#include <limits>           // For numeric_limits
#include <cmath>            // For pow()
#include <fstream>          // For ofstream

// string tester = bitset<8>(at_xor[0]).to_string<char, string::traits_type, string::allocator_type>();

int sieve(int n){  // Sieve of Eratosthenes

    int lastprime = 2;
    bool prime[n+1];                    // Initialize boolean array with n+1 indexes
    memset(prime, true, sizeof(prime)); // Set all values in bool prime to true

    for(int p = 2; p*p <= n; p++){  // While p^2 <= n
        if (prime[p] == true){      // Check if array prime element p is true (all previously untouched elements should be true)
            for(int i = p*2; i <= n; i += p)    // Generate every multiple of p up to n
                prime[i] = false;               // Set all multiples of p to false (not prime)
        }
    }
    for (int p = 2; p <= n; p++){if(prime[p]){lastprime = p;}}  // Set last prime iterated to lastprime

    return lastprime;
}

class xor_necessities{

    private:

        int integerized = 0;        // Sum of all ASCII/Decimal values in password
        int prime_a = 0;            // First prime number, generated by Sieve of Eratosthenes, used for key
        int prime_b = 0;            // Second prime number, generated by Sieve of Eratosthenes, used for key

        char convert;

        unsigned long long int key = 0;     // Unsigned Long Long Int, used to store key

        std::vector<long long int>bitpher;  // Ciphered bit holding vector
        std::vector<std::bitset<8>>cipher;  // Bitset holding vector

    public:

        void resetvars(){   // Reset all variables in PRIVATE
            integerized = 0;    // Reset int integerized
            prime_a = 0;        // Reset int prime_a
            prime_b = 0;        // Reset int prime_b
            key = 0;            // Reset unsigned long long int key

            convert = {};       // Reset char convert

            bitpher.clear();    // Reset vector bitpher
            cipher.clear();     // Reset vector cipher
        }

        void cipher_bit(int x, int index){  // Bitset creation function
            bitpher.push_back(pow(x, log(x + 1)));  // Set bitpher[x] to x^log(x + 1)
            bitpher[index] += key % 255;            // then add key % 255
            bitpher[index] %= 255;                  // then % bitpher[x] by 256, making maximum possible value in bitpher 255.
        }

        std::vector<std::bitset<8>> gen_cipher(std::string password){    // Vector function

            resetvars();    // Reset all variables

            for(unsigned x = 0; x < password.size(); x++){  // Iterate through each character in password string
                if(integerized > std::numeric_limits<int>::max() - 1000){integerized = 0;}   // If integerized is greater than numeric_limits<int>::max() - 1000, reset integerized
                integerized += password[x];  // integerized += positive or negative password[x], depending on negatize
            }

            prime_a = sieve(integerized % 8000);    // Set prime_a to prime number (integerized % 8000) for a maximum value of 7993
            prime_b = sieve(integerized % 4000);    // Set prime_b to prime number (integerized % 4000) for a maximum value of 3989

            if(prime_a < 500){prime_a = sieve(prime_a + 5000);} // Primes less than 500 are assigned a prime number >= 4999
            if(prime_b < 500){prime_b = sieve(prime_b + 3500);} // Primes less than 500 are assinged a prime number >= 3499

            key = pow(prime_a * prime_b, 2);    // Set key to prime_a * prime_b for a maximum value of 31884077
            key %= 255;                         // Modulos key by Maximum ASCII value, 255

            for(unsigned x = 0; x < password.size(); x++){  // Iterate through each character in password string
                cipher_bit(password[x], x);                 // and use decimal variant to create a bitset
                convert = bitpher[x];                       // Convert bitpher elements into string
                cipher.push_back(std::bitset<8>(convert));  // Push back cipher vector with bitset
            }

            return cipher;  // Return Cipher vector
        }

        void output_e_(std::vector<std::bitset<8>>output, bool bcotof, std::string outpath){    // Output function for XOR Encryption
            if(bcotof){                                                                                 // If outputto = file
                std::ofstream foutput;                                                                  // Create file output stream
                foutput.open(outpath, std::fstream::in | std::fstream::out | std::fstream::trunc);      // Open file from path outpath
                foutput << "toDEC__:: ";                                                                // Write "DEC__::" to file to signify the file is encrypted
                for(unsigned int x = 0; x < output.size(); x++){                                        // While x is less than the number of elements in output vector
                    foutput << output[x] << " ";                                                        // Write element x in output to file
                }
                foutput.close();                                                                        // Close file
            } else {    // Else outputto = line
                std::cout << "toDEC__:: ";                          // Write "DEC__::" to signify the line is encrypted
                for(unsigned int x = 0; x < output.size(); x++){    // While x is less than the number of elements in output vector
                    std::cout << output[x] << " ";                  // Print element x and an additional space to console
                }
                std::cout << std::endl; // End line
            }
        }

        void output_d_(std::vector<std::bitset<8>>output, bool bcotof, std::string outpath){    // Output function for XOR Decryption

            if(bcotof){                                                                                 // If outputto = file
                std::ofstream foutput;                                                                  // Create file output stream
                foutput.open(outpath, std::fstream::in | std::fstream::out | std::fstream::trunc);      // Open file from path outpath
                for(unsigned int x = 0; x < output.size(); x++){                                        // While x is less than the number of elements in output vector
                    unsigned char tmp = static_cast<unsigned char>(output[x].to_ulong());               // Convert bitset output to char
                    foutput << tmp;                                                                     // Write the converted element to file
                }
                foutput.close();                                                                        // Close file
            } else {    // Else outputto = line
                for(unsigned int x = 0; x < output.size(); x++){                            // While x is less than the number of elements in output vector
                    unsigned char tmp = static_cast<unsigned char>(output[x].to_ulong());   // Convert bitset output to char
                    std::cout << tmp;                                                       // Print to console
                }
                std::cout << " " << std::endl; // End line
            }
        }

}; xor_necessities xor_n; // Create object xor_n

class rbea_necessities{

    public:

        void _output(std::vector<long int>output, bool decrypt, bool bcotof, std::string outpath){   // Output function

            if(decrypt){                    // If output is decrypted
                if(bcotof){                 // If outputto = file
                    std::ofstream foutput;  // Create file output stream
                    foutput.open(outpath, std::fstream::in | std::fstream::out | std::fstream::trunc);  // Open file from path outpath
                    for(unsigned int x = 0; x < output.size(); x++){    // While x is less than the amount of elements in output vector
                        foutput << (char)output[x];                     // Convert element x to char then write to file
                    }
                    foutput.close();    // Close file
                } else {    // If outputto = line
                    for(unsigned int x = 0; x < output.size(); x++){    // While x is less than the number of elements in output vector
                        std::cout << (char)output[x];                   // Convert element x to char then print to console
                    }
                    std::cout << " " << std::endl; // End line
                }
            } else {                        // If output is encrypted
                if(bcotof){                 // If outputto = file
                    std::ofstream foutput;  // Create file output stream
                    foutput.open(outpath, std::fstream::in | std::fstream::out | std::fstream::trunc);  // Open file from path outpath
                    foutput << "toDEC__:: ";                                // Write "toDEC__::" to signify the file is encrypted
                    for(unsigned int x = 0; x < output.size(); x++){        // While x is less than the amount of elements in output vector
                        foutput << output[x] << " ";                        // Write element x and and additional space to file
                    }
                    foutput.close();    // Close file
                } else {    // If outputto = line
                    std::cout << "toDEC__:: ";                          // Write "DEC__::" to signify the line is encrypted
                    for(unsigned int x = 0; x < output.size(); x++){    // While x is less than the number of elements in output vector
                        std::cout << output[x] << " ";                  // Print element x and an additional space to console
                    }
                    std::cout << std::endl; // End line
                }
            }
        }
}; rbea_necessities rbea_n; // Create object rbea_n
